{"name": "test_validLogin[thanhkieu-123456]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: chrome not reachable\n  (Session info: chrome=96.0.4664.45)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00EE6903+2517251]\n\tOrdinal0 [0x00E7F8E1+2095329]\n\tOrdinal0 [0x00D82710+1058576]\n\tOrdinal0 [0x00D776A4+1013412]\n\tOrdinal0 [0x00D77EA8+1015464]\n\tOrdinal0 [0x00D79695+1021589]\n\tOrdinal0 [0x00D73686+996998]\n\tOrdinal0 [0x00D83A60+1063520]\n\tOrdinal0 [0x00DD5382+1397634]\n\tOrdinal0 [0x00DC639B+1336219]\n\tOrdinal0 [0x00DA27A7+1189799]\n\tOrdinal0 [0x00DA3609+1193481]\n\tGetHandleVerifier [0x01075904+1577972]\n\tGetHandleVerifier [0x01120B97+2279047]\n\tGetHandleVerifier [0x00F76D09+534521]\n\tGetHandleVerifier [0x00F75DB9+530601]\n\tOrdinal0 [0x00E84FF9+2117625]\n\tOrdinal0 [0x00E898A8+2136232]\n\tOrdinal0 [0x00E899E2+2136546]\n\tOrdinal0 [0x00E93541+2176321]\n\tBaseThreadInitThunk [0x76BFFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77727A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77727A6E+238]", "trace": "test_setup = None, username = 'thanhkieu', password = 123456\n\n    @allure.description(\"Validate Tpos with valid login \")\n    @allure.severity(severity_level=\"CRITICAL\")\n    @pytest.mark.parametrize(\"username, password\", readData())\n    def test_validLogin(test_setup, username, password):\n        driver.get(\"https://tmt30.tpos.vn/#/account/login\")\n        driver.find_element_by_css_selector(\"[type='text'][placeholder='Tên tài khoản']\").clear()\n        enter_username(username)\n        driver.find_element_by_css_selector(\"[type='password'][placeholder='Mật khẩu']\").clear()\n        enter_password(password)\n    \n        driver.find_element_by_css_selector(\"[type='submit'][class='btn btn-lg btn-primary btn-block']\").click()\n        time.sleep(5)\n        try:\n>           assert \"dashboard\" in driver.current_url\n\ntest_login.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f28d65b766c76e4a92feedb5df225af1\")>\n\n    @property\n    def current_url(self) -> str:\n        \"\"\"\n        Gets the URL of the current page.\n    \n        :Usage:\n            ::\n    \n                driver.current_url\n        \"\"\"\n>       return self.execute(Command.GET_CURRENT_URL)['value']\n\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f28d65b766c76e4a92feedb5df225af1\")>, driver_command = 'getCurrentUrl', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002707881B0D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\\\\n  (Session info: ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77727A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77727A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE         (Session info: chrome=96.0.4664.45)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00EE6903+2517251]\nE       \tOrdinal0 [0x00E7F8E1+2095329]\nE       \tOrdinal0 [0x00D82710+1058576]\nE       \tOrdinal0 [0x00D776A4+1013412]\nE       \tOrdinal0 [0x00D77EA8+1015464]\nE       \tOrdinal0 [0x00D79695+1021589]\nE       \tOrdinal0 [0x00D73686+996998]\nE       \tOrdinal0 [0x00D83A60+1063520]\nE       \tOrdinal0 [0x00DD5382+1397634]\nE       \tOrdinal0 [0x00DC639B+1336219]\nE       \tOrdinal0 [0x00DA27A7+1189799]\nE       \tOrdinal0 [0x00DA3609+1193481]\nE       \tGetHandleVerifier [0x01075904+1577972]\nE       \tGetHandleVerifier [0x01120B97+2279047]\nE       \tGetHandleVerifier [0x00F76D09+534521]\nE       \tGetHandleVerifier [0x00F75DB9+530601]\nE       \tOrdinal0 [0x00E84FF9+2117625]\nE       \tOrdinal0 [0x00E898A8+2136232]\nE       \tOrdinal0 [0x00E899E2+2136546]\nE       \tOrdinal0 [0x00E93541+2176321]\nE       \tBaseThreadInitThunk [0x76BFFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77727A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77727A6E+238]\n\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_setup = None, username = 'thanhkieu', password = 123456\n\n    @allure.description(\"Validate Tpos with valid login \")\n    @allure.severity(severity_level=\"CRITICAL\")\n    @pytest.mark.parametrize(\"username, password\", readData())\n    def test_validLogin(test_setup, username, password):\n        driver.get(\"https://tmt30.tpos.vn/#/account/login\")\n        driver.find_element_by_css_selector(\"[type='text'][placeholder='Tên tài khoản']\").clear()\n        enter_username(username)\n        driver.find_element_by_css_selector(\"[type='password'][placeholder='Mật khẩu']\").clear()\n        enter_password(password)\n    \n        driver.find_element_by_css_selector(\"[type='submit'][class='btn btn-lg btn-primary btn-block']\").click()\n        time.sleep(5)\n        try:\n            assert \"dashboard\" in driver.current_url\n        finally:\n            if (AssertionError):\n>               allure.attach(driver.get_screenshot_as_png(),\n                              name=\"Tài khoản đăng nhập không đúng\", attachment_type=allure.attachment_type.PNG)\n\ntest_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1353: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode('ascii'))\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1365: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002707881B0D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\\\\n  (Session info: ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77727A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77727A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE         (Session info: chrome=96.0.4664.45)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00EE6903+2517251]\nE       \tOrdinal0 [0x00E7F8E1+2095329]\nE       \tOrdinal0 [0x00D82710+1058576]\nE       \tOrdinal0 [0x00D776A4+1013412]\nE       \tOrdinal0 [0x00D77EA8+1015464]\nE       \tOrdinal0 [0x00D79695+1021589]\nE       \tOrdinal0 [0x00D73686+996998]\nE       \tOrdinal0 [0x00D83A60+1063520]\nE       \tOrdinal0 [0x00DD5382+1397634]\nE       \tOrdinal0 [0x00DC639B+1336219]\nE       \tOrdinal0 [0x00DA27A7+1189799]\nE       \tOrdinal0 [0x00DA3609+1193481]\nE       \tGetHandleVerifier [0x01075904+1577972]\nE       \tGetHandleVerifier [0x01120B97+2279047]\nE       \tGetHandleVerifier [0x00F76D09+534521]\nE       \tGetHandleVerifier [0x00F75DB9+530601]\nE       \tOrdinal0 [0x00E84FF9+2117625]\nE       \tOrdinal0 [0x00E898A8+2136232]\nE       \tOrdinal0 [0x00E899E2+2136546]\nE       \tOrdinal0 [0x00E93541+2176321]\nE       \tBaseThreadInitThunk [0x76BFFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77727A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77727A6E+238]\n\nC:\\Users\\TMT\\PycharmProjects\\pythonProject1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "description": "Validate Tpos with valid login ", "steps": [{"name": "Entering username as 'thanhkieu'", "status": "passed", "parameters": [{"name": "username", "value": "'thanhkieu'"}], "start": 1638785556365, "stop": 1638785556433}, {"name": "Entering password as 123456", "status": "passed", "parameters": [{"name": "password", "value": "123456"}], "start": 1638785556472, "stop": 1638785556548}], "parameters": [{"name": "username", "value": "'thanhkieu'"}, {"name": "password", "value": "123456"}], "start": 1638785553930, "stop": 1638785585873, "uuid": "6589bfa9-742f-441d-b724-0dc84359e216", "historyId": "f43f5e15ac26d47a161a51c4d1b28850", "testCaseId": "82c040d7e14f97dac0e33ffd3f20c3c3", "fullName": "test_login#test_validLogin", "labels": [{"name": "severity", "value": "CRITICAL"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "CN1-KIEUTTT"}, {"name": "thread", "value": "10592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}